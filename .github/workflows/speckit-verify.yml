name: speckit-verify
on:
  pull_request:
  push:
    branches: [main]
jobs:
  verify:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: '20', cache: 'pnpm' }
      - run: corepack enable
      - run: pnpm install --frozen-lockfile
      - run: pnpm -w -r build
      - name: Build Speckit Core
        run: pnpm --filter @speckit/core run build
      - name: Build Speckit CLI
        run: pnpm --filter @speckit/cli run build
      - name: Regenerate docs from spec
        run: node packages/speckit-cli/dist/cli.js gen --write
      - name: Audit generated docs
        run: node packages/speckit-cli/dist/cli.js audit
      - name: Fail if generated docs drift
        run: git diff --exit-code || (echo "Generated docs drift detected. Run 'speckit gen --write' and commit." && exit 1)
      - name: Speckit Doctor Report
        run: node packages/speckit-cli/dist/cli.js doctor --json > doctor-report.json
      - name: Upload doctor report
        uses: actions/upload-artifact@v4
        with:
          name: doctor-report
          path: doctor-report.json
      - name: Comment doctor summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const marker = '<!-- speckit-doctor-report -->';
            const report = JSON.parse(fs.readFileSync('doctor-report.json', 'utf8'));
            const policyRows = report.policyChecks
              .map(check => {
                const status = check.ok ? '✅' : '❌';
                const detail = check.detail ? check.detail.replace(/\n/g, ' ') : '';
                return `| ${status} | ${check.label} | ${detail} |`;
              })
              .join('\n');
            const body = [
              '## Speckit Doctor Report',
              marker,
              '',
              `Default mode: **${report.defaultMode}**`,
              '',
              '| Status | Check | Detail |',
              '| --- | --- | --- |',
              policyRows || '| - | - | - |',
              '',
              '<sub>Generated by speckit-verify</sub>'
            ].join('\n');

            const { owner, repo } = context.repo;
            const issue_number = context.issue.number;
            const { data: comments } = await github.rest.issues.listComments({
              owner,
              repo,
              issue_number,
              per_page: 100,
            });
            const previous = comments.find(comment => comment.body && comment.body.includes(marker));
            if (previous) {
              await github.rest.issues.updateComment({
                owner,
                repo,
                comment_id: previous.id,
                body,
              });
            } else {
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number,
                body,
              });
            }
      - name: Enforce doctor gates
        run: |
          node - <<'NODE'
          const fs = require('fs');

          const report = JSON.parse(fs.readFileSync('doctor-report.json', 'utf8'));
          const errors = [];

          if (report.defaultMode !== 'classic') {
            errors.push(`Default generation mode must be 'classic' (found ${report.defaultMode}).`);
          }

          const classicTemplates = report.templatesByMode?.classic ?? [];
          if (!Array.isArray(classicTemplates) || classicTemplates.length === 0) {
            errors.push('At least one Classic template is required.');
          }

          const checks = new Map((report.policyChecks ?? []).map(check => [check.id, check]));
          const catalogWorkflow = checks.get('catalogGateWorkflowPresent');
          if (!catalogWorkflow?.ok) {
            errors.push(catalogWorkflow?.detail || 'Catalog gate workflow is missing.');
          }

          const catalogLabel = checks.get('catalogGateRequiresLabel');
          if (!catalogLabel?.ok) {
            errors.push(catalogLabel?.detail || "Catalog gate must require 'catalog:allowed' label.");
          }

          if (errors.length) {
            console.error('Speckit Doctor detected configuration issues:\n');
            for (const issue of errors) {
              console.error(` - ${issue}`);
            }
            process.exit(1);
          }
          NODE
