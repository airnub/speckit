name: experimental-and-graduation-guard

on:
  pull_request:
    types: [opened, edited, synchronize, reopened, labeled, unlabeled]

jobs:
  guard:
    runs-on: ubuntu-latest
    env:
      HAS_EXPERIMENTAL_LABEL: ${{ contains(github.event.pull_request.labels.*.name, 'experimental:allowed') }}
      HAS_GRADUATION_LABEL: ${{ contains(github.event.pull_request.labels.*.name, 'graduation:approved') }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Detect changes
        id: diff
        run: |
          base=origin/${{ github.base_ref }}
          git fetch origin ${{ github.base_ref }} --depth=1
          git diff --name-only $base...HEAD > changed.txt
          echo "files<<EOF" >> "$GITHUB_OUTPUT"
          cat changed.txt >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
          cat changed.txt
      - name: Guard experimental default flip
        if: contains(steps.diff.outputs.files, 'packages/speckit-cli/src/config/featureFlags.ts')
        run: |
          base=origin/${{ github.base_ref }}
          git show $base:packages/speckit-cli/src/config/featureFlags.ts > before.ts
          cat packages/speckit-cli/src/config/featureFlags.ts > after.ts
          before=$(grep -E 'experimental\.enabled\s*=\s*(true|false)' before.ts | head -n1 || true)
          after=$(grep -E 'experimental\.enabled\s*=\s*(true|false)' after.ts | head -n1 || true)
          echo "Before: $before"
          echo "After : $after"
          if [ "${HAS_EXPERIMENTAL_LABEL}" != "true" ] && echo "$before" | grep -q 'false' && echo "$after" | grep -q 'true'; then
            echo "Experimental default enabled. Require label 'experimental:allowed'."
            exit 1
          fi
      - name: Guard framework status flips
        if: contains(steps.diff.outputs.files, 'packages/speckit-cli/src/config/frameworkRegistry.ts')
        run: |
          base=origin/${{ github.base_ref }}
          git show $base:packages/speckit-cli/src/config/frameworkRegistry.ts > before.ts
          cp packages/speckit-cli/src/config/frameworkRegistry.ts after.ts
          node <<'NODE'
          const fs = require('fs');
          const before = fs.readFileSync('before.ts', 'utf8');
          const after = fs.readFileSync('after.ts', 'utf8');
          const regex = /(hipaa|gdpr|soc2|iso27001|edu-us|edu-eu-ie)"?\s*:\s*\{[\s\S]*?status:\s*"(experimental|ga)"/g;
          const extract = (src) => {
            const result = {};
            let match;
            while ((match = regex.exec(src)) !== null) {
              result[match[1]] = match[2];
            }
            return result;
          };
          const beforeMap = extract(before);
          const afterMap = extract(after);
          const hasGraduationLabel = process.env.HAS_GRADUATION_LABEL === 'true';
          let failure = false;
          for (const id of Object.keys(afterMap)) {
            if (!beforeMap[id]) continue;
            if (beforeMap[id] === afterMap[id]) continue;
            if (beforeMap[id] === 'experimental' && afterMap[id] === 'ga') {
              if (!hasGraduationLabel) {
                console.log(`Framework ${id} graduated to GA. Require label 'graduation:approved'.`);
                failure = true;
              }
            } else if (beforeMap[id] === 'ga' && afterMap[id] === 'experimental') {
              if (!hasGraduationLabel) {
                console.log(`Regression detected for ${id} (ga -> experimental). Require label 'graduation:approved'.`);
                failure = true;
              }
            }
          }
          if (failure) process.exit(1);
          NODE
          rm -f before.ts after.ts
